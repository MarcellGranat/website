{
  "hash": "4b0da4d53a7b64d156f17de92c83f530",
  "result": {
    "markdown": "---\ntitle: ggProfessional\ndate: '2023-02-21'\nslug: ggprofessional\nimage: featured.png\ncategories: \n  - package\nexecute: \n  fig-align: center\n---\n\n\nThis package is helpful for those who regularly use the {ggplot2} package to perform their daily institutional tasks.\n\n\n::: {.cell}\n\n:::\n\n\n# ggProfessional <img src=\"logo.png\" align=\"right\" width=\"120px\"/>\n\n## Overview\n\nBased on my several years of experience in the research, the private and the public sector, this package is helpful for those who regularly use the {ggplot2} package to perform their daily institutional tasks.\n\n`ggProfessional` helps you with:\n\n-   exporting all your plots\n\n-   manage themes and palettes\n\n-   add your logo or watermark to the figures\n\n## Installation\n\n`ggProfessional` is not available in the CRAN, since it does not satisfy the requirements (saves into your wd, creates global variables to work with `gg` elements), and it is built on packages that are not available on CRAN.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"devtools\")\ndevtools::install_github(\"MarcellGranat/ggProfessional\")\n```\n:::\n\n\n## Usage\n\n### Export\n\nAs you load the package, two functions are immediately assigned to your global environment: `-` & `.gg_finalise` (hidden).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggProfessional)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"-.gg\"\n```\n:::\n:::\n\n\n`-.gg` is taken from the following [SW solution](https://stackoverflow.com/questions/40637088/how-to-pipe-forward-a-ggplot-object). It allows you to use a function on a gg object, without assigning in. I recommend you to add `- .gg_finalise` to all your gg code blocks at the end, by default it will return the plot, without any modification, but if you later update the `.gg_finalise` function, you can specify your saving method, and it will be used to all your figures.\n\nCombine this with the plot_to<filetype> functions from the package, helps you in the situations when you have to share your figures also in ppt/excel/csv.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(iris, aes(Sepal.Length, Petal.Width)) + \n  geom_point() - # <\n  .gg_finalise # no brackets!\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n.gg_finalise <<- function(plot = ggplot2::last_plot()) {\n  plot_to_ppt(plot) # save all plots into one ppt file\n  plot_to_excel(plot) # save all plots into one excel file (as table)\n  plot_to_csv(plot) # save all plots into separate csv files (as table)\n  plot\n  }\n```\n:::\n\n\n![](https://github.com/MarcellGranat/ggProfessional/raw/main/man/figures/meme.png){fig-align=\"center\" width=\"90%\"}\n\n### Manage themes and palettes\n\nSet theme for ggplot figures was already built in the `{ggplot2}` package. In this field I can only extend that with the `register_theme`/`available_themes`/`get_theme` functions. This help you to save your theme and reuse that in all of your projects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregister_theme(ggplot2::theme_bw() + theme(title = element_text(color = \"red\")), name = \"rbw\")\nregister_theme(ggplot2::theme_minimal() + theme(title = element_text(color = \"green\")), name = \"gminimal\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\navailable_themes()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\nSimilarly you have these functions for palettes. But `set_palette` will create a `.co` hidden function that helps you to easily use your own palette (e.g. `.co(1:2)` returns the first two colors in your palette, but you can also use named colors.). `set_palette` can also register the colors as default.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregister_palette(c(\"red1\", \"#0c4853\", \"steelblue\", \"blue2\", \"green\", \"yellow\", \"#FF6F91\"), name = \"first\")\nregister_palette(c(\"blue\", \"purple\", \"cyan\", \"blue2\", \"orange\", \"yellow\", \"#FF6F91\"), name = \"sec\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\navailable_palettes()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset_palette(\"first\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n.co(1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"red1\"      \"#0c4853\"   \"steelblue\"\n```\n:::\n:::\n\n\n**Note:** If you set `attach = TRUE`, then colors on all ggplot figures will be automatically updates with this palette.\n\n\n::: {.cell}\n\n:::\n\n\n### Logos\n\nYou can register your institutional logos (saved only locally) and reuse in every project.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nregister_logo(path = \"logo.png\", \"ggp\") # example\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nggplot(iris, aes(Sepal.Length, Petal.Width)) + \n  geom_point() +\n  watermark_logo(\"ggp\", alpha = .2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=672}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(iris, aes(Sepal.Length, Petal.Width)) + \n  geom_point() -\n  corner_logo\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}